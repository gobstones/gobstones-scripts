#!/usr/bin/env sh

# Load husky
. "$(dirname -- "$0")/_/husky.sh"

# Read parameters
REMOTE_NAME=$1;
REMOTE_URL=$2;
# Read the input and split it approprietly
INPUT=$(cat);
INPUT_ARR=($INPUT);

LOCAL_REF=${INPUT_ARR[0]}
LOCAL_OBJ_NAME=${INPUT_ARR[1]}
REMOTE_REF=${INPUT_ARR[2]}
REMOTE_OBJ_NAME=${INPUT_ARR[3]}

# Set failing on command fail, pipe fail, and undefined variable use
set -euo pipefail

# This hook is called by git-push and can be used to prevent a
# push from taking place. The hook is called with two parameters
# which provide the name and location of the destination remote,
# if a named remote is not being used both values will be the same.

# Information about what is to be pushed is provided on the hookâ€™s
# standard input with lines of the form:
# <local ref> SP <local object name> SP <remote ref> SP <remote object name> LF

# For instance, if the command git push origin master:foreign were
# run the hook would receive a line like the following:
# refs/heads/master 67890 refs/heads/foreign 12345

# although the full object name would be supplied. If the foreign ref
# does not yet exist the <remote object name> will be the all-zeroes
# object name. If a ref is to be deleted, the <local ref> will be
# supplied as (delete) and the <local object name> will be the
# all-zeroes object name. If the local commit was specified by
# something other than a name which could be expanded
# (such as HEAD~, or an object name) it will be supplied as it was
# originally given.

# If this hook exits with a non-zero status, git push will abort without
# pushing anything. Information about why the push is rejected may be
# sent to the user by writing to standard error.

# We currently use this hook to verify that any commit (to any branch)
# passes the tests configured.
# If a tag is being pushed, then, we generate the documentation
# and publish the generated folder to the corresponding docs branch
# on the origin remote.
# This particular project also updated the version of the library
# to match that of the tag.

# Show welcome message
echo "**************************";
echo "Running pre push hooks";
echo "**************************";
echo "";

# Run all the tests
echo "Running tests";
npx --no -- gobstones-scripts run test --silent;

# If pushing a tag, generate doc and push them as
# a "docs" branch in the remote.
case "$LOCAL_REF" in
    refs\/tags*)
        # Apply specific code when publishing tags
        echo "\nYour tag is being pushed...\n";;
    *)
        # Apply specific code when publishing any branch
        echo "\nYour branch is being pushed...\n";;
esac

exit 0;
